/// 生命周期 lifetime
/// cargo run --bin 1_生命周期_lifetime

/*
  # lifetime 生命周期：引用保持有效的作用域。

  Rust的每一个引用都有自己的生命周期。
  大多数情况：生命周期是隐式的、可被推断的。当引用的生命周期可能以不同的方式互相关联时：需要手动标注生命周期。

  生命周期的主要目标：避免悬垂引用（dangling reference）

  Example:

    {
      let r;
      {
        let x = 5;
        r = &x;
      }

      println!("r: {}", r);
    }

   
   ## 生命周期标注语法
   - 生命周期的标注不会改变引用的生命周期长度
   - 当指定了泛型生命周期参数，函数可以接收带有任何生命周期的引用
   - 生命周期的标注，描述了多个引用的生命周期间的关系，但不影响生命周期

   * 生命周期参数名
   * 以 ' 开头
   * 通常全小写且非常短
   * 很多人使用'a
   * 
   * 生命周期标准的位置：
   * 在引用的 & 符号后
   * 使用空格将标注和引用类型分开
   * 
   * &i32 // 一个引用
   * &'a i32 // 带有显式生命周期的引用
   * &'a mut i32 // 带有显式生命周期的可变引用
   * 
   * 单个生命周期的标注本身没有什么实际意义。
   
   生命周期的省略

   输入生命周期、输出生命周期

   

*/

fn main() {
  // {
  //   let r;
  //   {
  //     let x = 5;
  //     r = &x;
  //   }

  //   println!("r: {}", r);
  // }
}
